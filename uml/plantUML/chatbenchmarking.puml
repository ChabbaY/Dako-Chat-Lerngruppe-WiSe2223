@startuml
interface edu.hm.dako.chatbenchmarking.gui.BenchmarkingClientUserInterface {
~ void showStartData(UserInterfaceStartData)
~ void showResultData(UserInterfaceResultData)
~ void setMessageLine(String)
~ void resetCurrentRunTime()
~ void addCurrentRunTime(long)
~ void testFinished()
~ JProgressBar getProgressBar()
~ ProgressBar getProgressBarFx()
~ void countUpProgressTask()
}
class edu.hm.dako.chatbenchmarking.DistributionMetrics {
~ double minimum
~ double maximum
~ double percentile10
~ double percentile25
~ double percentile50
~ double percentile75
~ double percentile90
~ double range
~ double interQuartilRange
~ double mean
~ double variance
~ double standardDeviation
+ <<Create>> DistributionMetrics()
+ double getMinimum()
+ void setMinimum(double)
+ double getMaximum()
+ void setMaximum(double)
+ double getPercentile10()
+ void setPercentile10(double)
+ double getPercentile25()
+ void setPercentile25(double)
+ double getPercentile50()
+ void setPercentile50(double)
+ double getPercentile75()
+ void setPercentile75(double)
+ double getPercentile90()
+ void setPercentile90(double)
+ double getInterQuartilRange()
+ void setInterQuartilRange(double)
+ double getRange()
+ void setRange(double)
+ double getMean()
+ void setMean(double)
+ double getVariance()
+ void setVariance(double)
+ double getStandardDeviation()
+ void setStandardDeviation(double)
}
interface edu.hm.dako.chatbenchmarking.BenchmarkingStartInterface {
~ void executeTest(UserInterfaceInputParameters,BenchmarkingClientUserInterface)
}
class edu.hm.dako.chatbenchmarking.gui.UserInterfaceResultData {
~ double mean
~ double standardDeviation
- long numberOfSentRequests
- long numberOfResponses
- long numberOfLostResponses
- long numberOfRetries
- String endTime
- long elapsedTime
- long numberOfSentEventMessages
- long numberOfReceivedConfirmEvents
- long numberOfLostConfirmEvents
- long numberOfRetriedEvents
- double avgServerTime
- long maxHeapSize
- float maxCpuUsage
- double minimum
- double maximum
- double percentile10
- double percentile25
- double percentile50
- double percentile75
- double percentile90
- double range
- double interQuartilRange
+ <<Create>> UserInterfaceResultData()
+ long getNumberOfSentRequests()
+ void setNumberOfSentRequests(long)
+ long getNumberOfResponses()
+ void setNumberOfResponses(long)
+ long getNumberOfLostResponses()
+ void setNumberOfLostResponses(long)
+ long getNumberOfRetries()
+ void setNumberOfRetries(long)
+ long getElapsedTime()
+ void setElapsedTime(long)
+ String getEndTime()
+ void setEndTime(String)
+ long getNumberOfSentEventMessages()
+ void setNumberOfSentEventMessages(long)
+ long getNumberOfReceivedConfirmEvents()
+ void setNumberOfReceivedConfirmEvents(long)
+ long getNumberOfLostConfirmEvents()
+ void setNumberOfLostConfirmEvents(long)
+ long getNumberOfRetriedEvents()
+ void setNumberOfRetriedEvents(long)
+ double getAvgServerTime()
+ void setAvgServerTime(double)
+ long getMaxHeapSize()
+ void setMaxHeapSize(long)
+ double getMaxCpuUsage()
+ void setMaxCpuUsage(float)
+ double getMinimum()
+ void setMinimum(double)
+ double getMaximum()
+ void setMaximum(double)
+ double getPercentile10()
+ void setPercentile10(double)
+ double getPercentile25()
+ void setPercentile25(double)
+ double getPercentile50()
+ void setPercentile50(double)
+ double getPercentile75()
+ void setPercentile75(double)
+ double getPercentile90()
+ void setPercentile90(double)
+ double getInterQuartilRange()
+ void setInterQuartilRange(double)
+ double getRange()
+ void setRange(double)
+ double getMean()
+ void setMean(double)
+ double getStandardDeviation()
+ void setStandardDeviation(double)
}
class edu.hm.dako.chatbenchmarking.BenchmarkingClientFactory {
- <<Create>> BenchmarkingClientFactory()
+ {static} Runnable getClient(ClientUserInterface,UserInterfaceInputParameters,int,SharedClientStatistics,BenchmarkingClientUserInterface)
}
class edu.hm.dako.chatbenchmarking.gui.BenchmarkingClientFxGUI {
- {static} int MIN_SCREEN_SIZE
- {static} Pattern IPV6_PATTERN
- {static} Pattern IPV4_PATTERN
~ Label messageArea
~ Button abortButton
~ Button startButton
~ Button newButton
~ Button finishButton
~ VBox pane
~ VBox box
- StringProperty labelString
~ BenchmarkingClientCoordinator benchClient
~ Dimension dim
~ UserInterfaceInputParameters iParam
~ ObservableList<String> implTypeOptions
~ ObservableList<String> measureTypeOptions
- ComboBox<String> optionListImplType
- ComboBox<String> optionListMeasureType
- TextField textFieldNumberOfClientThreads
- TextField textFieldNumberOfMessagesPerClients
- TextField textFieldServerport
- TextField textFieldThinkTime
- TextField textFieldServerIpAddress
- TextField textFieldMessageLength
- TextField textFieldNumberOfMaxRetries
- TextField textFieldResponseTimeout
- TextField textFieldPlannedRequests
- TextField textFieldTestBegin
- TextField textFieldSentRequests
- TextField textFieldTestEnd
- TextField textFieldReceivedResponses
- TextField textFieldTestDuration
- TextField textFieldPlannedEventMessages
- TextField textFieldSentEventMessages
- TextField textFieldReceivedConfirmEvents
- TextField textFieldLostConfirmEvents
- TextField textFieldRetriedEvents
- TextField textFieldNumberOfRetries
- TextField textFieldAvgRTT
- TextField textFieldAvgServerTime
- TextField textFieldMaxRTT
- TextField textFieldMaxHeapUsage
- TextField textFieldMinRTT
- TextField textFieldAvgCpuUsage
- TextField textField10Percentile
- TextField textField25Percentile
- TextField textField50Percentile
- TextField textField75Percentile
- TextField textField90Percentile
- TextField textFieldRange
- TextField textFieldInterquartilRange
- TextField textFieldStandardDeviation
- ProgressBar progressBarFx
- Label implType
- Label numberOfClientThreads
- Label numberOfMessagesPerClients
- Label serverport
- Label thinkTime
- Label serverIpAddress
- Label messageLength
- Label numberOfMaxRetries
- Label responseTimeout
- ScrollPane scrollPane
- Task<Boolean> task
- Label progressIndicator
- int progressCounter
- Long timeCounter
- boolean startable
+ <<Create>> BenchmarkingClientFxGUI()
+ {static} void main(String[])
+ void start(Stage)
- void createGuiPane()
- Pane createInputPane()
- Pane fillPane(GridPane)
- Pane createRunTimePane()
- Pane createResultPane()
- HBox createButtonPane()
- StackPane createProgressPane()
- Label createLabel(String)
- ProgressBar createProgressbar()
- TextField createNotEditableTextField(GridPane,int,int)
- TextField createEditableTextField(GridPane,int,int,String)
- HBox createSeparator(String)
- ComboBox<String> createComboBox(ObservableList<String>)
- ScrollPane createScrollPane()
- Task<Boolean> progressTask()
- void countUpProgressBar()
- void reactOnStartButton()
- void reactOnNewButton()
- void reactOnFinishButton()
- void reactOnAbortButton()
- void startGui()
- void setServerPort()
- void setThinkTime()
- void setNumberOfClientThreads()
- void setNumberOfMessagesPerClient()
- void setMessageLength()
- void setResponseTimeOut()
- void setNumberOfMaxRetries()
- void setServerIpAddress()
- void readComboBoxes()
- void setAlert(String)
- void newAction()
+ void showStartData(UserInterfaceStartData)
+ void showResultData(UserInterfaceResultData)
+ void setMessageLine(String)
+ void resetCurrentRunTime()
+ void addCurrentRunTime(long)
+ void testFinished()
+ ProgressBar getProgressBarFx()
+ void countUpProgressTask()
+ JProgressBar getProgressBar()
}
class edu.hm.dako.chatbenchmarking.BenchmarkingClientCoordinator {
- {static} Logger log
~ UserInterfaceInputParameters params
~ BenchmarkingClientUserInterface benchmarkingClientGui
~ long numberOfAllRequests
~ long startTime
~ String startTimeAsString
~ Calendar cal
~ BenchmarkingTimeCounterThread timeCounterThread
- SharedClientStatistics sharedData
- CpuUtilisationWatch cpuUtilisationWatch
- boolean running
- boolean abortedFlag
+ <<Create>> BenchmarkingClientCoordinator()
- String getCurrentTime(Calendar)
+ void executeTest(UserInterfaceInputParameters,BenchmarkingClientUserInterface)
+ void run()
+ void setUserList(Vector<String>)
+ void setMessageLine(String,String)
+ void setErrorMessage(String,String,long)
+ void loginComplete()
+ void logoutComplete()
+ boolean getLock()
+ void setLock(boolean)
+ void abortTest()
+ boolean isRunning()
+ void releaseTest()
+ boolean isTestAborted()
+ long getLastServerTime()
+ void setLastServerTime(long)
+ void setSessionStatisticsCounter(long,long,long,long,long)
+ long getNumberOfSentEvents()
+ long getNumberOfReceivedConfirms()
+ long getNumberOfLostConfirms()
+ long getNumberOfRetries()
+ long getNumberOfReceivedChatMessages()
- UserInterfaceResultData getResultData(long)
}
class edu.hm.dako.chatbenchmarking.gui.UserInterfaceStartData {
~ long numberOfRequests
~ String startTime
~ long numberOfPlannedEventMessages
+ <<Create>> UserInterfaceStartData()
+ long getNumberOfRequests()
+ void setNumberOfRequests(long)
+ String getStartTime()
+ void setStartTime(String)
+ long getNumberOfPlannedEventMessages()
+ void setNumberOfPlannedEventMessages(long)
}
class edu.hm.dako.chatbenchmarking.BenchmarkingClientImpl {
- {static} Logger log
- AtomicBoolean chatResponseReceived
- AtomicLong lastServerTime
# int clientNumber
# int messageLength
# int numberOfMessagesToSend
# int responseTimeout
# int nrOfRetries
# int clientThinkTime
# ChatServerImplementationType implementationType
# BenchmarkingClientUserInterface benchmarkingGui
# SharedClientStatistics sharedStatistics
- long numberOfSentEvents
- long numberOfReceivedConfirms
- long numberOfLostConfirms
- long numberOfRetries
- long numberOfReceivedChatMessages
+ <<Create>> BenchmarkingClientImpl(ClientUserInterface,BenchmarkingClientUserInterface,ChatServerImplementationType,int,String,int,int,int,int,int,int,SharedClientStatistics)
- void startMessageListenerThread()
+ void run()
- void waitUntilChatResponseReceived()
- void sendMessageAndWaitForAck(int)
- void waitForLoggedInClients()
- void waitForLoggingOutClients()
- void postReceive(int,long,long)
- void postLogout()
+ void setUserList(Vector<String>)
+ void setMessageLine(String,String)
+ void setErrorMessage(String,String,long)
+ void loginComplete()
+ void logoutComplete()
+ boolean getLock()
+ void setLock(boolean)
+ void abortTest()
+ boolean isRunning()
+ void releaseTest()
+ boolean isTestAborted()
+ long getLastServerTime()
+ void setLastServerTime(long)
+ void setSessionStatisticsCounter(long,long,long,long,long)
+ long getNumberOfSentEvents()
+ long getNumberOfReceivedConfirms()
+ long getNumberOfLostConfirms()
+ long getNumberOfRetries()
+ long getNumberOfReceivedChatMessages()
}
class edu.hm.dako.chatbenchmarking.BenchmarkingStarter {
+ <<Create>> BenchmarkingStarter()
+ {static} void main(String[])
}
class edu.hm.dako.chatbenchmarking.SharedClientStatistics {
- {static} Logger log
- int numberOfClients
- int numberOfMessages
- int clientThinkTime
- int numberOfAllMessages
- CountDownLatch loginSignal
- CountDownLatch logoutSignal
- ClientStatistics[] clientStatistics
~ long numberOfPlannedEventMessages
- int numberOfLoggedInClients
- int numberOfLoggedOutClients
+ <<Create>> SharedClientStatistics(int,int,int)
- boolean notInRange(int)
+ CountDownLatch getLoginSignal()
+ CountDownLatch getLogoutSignal()
+ void increaseNumberOfLoggedInClients()
+ int getNumberOfLoggedInClients()
+ void increaseNumberOfLoggedOutClients()
+ void increaseSentMsgCounter(int)
+ void setNumberOfSentEventMessages(int,long)
+ long getNumberOfSentEventMessages(int)
+ void setNumberOfLostConfirmEvents(int,long)
+ long getNumberOfLostConfirmEvents(int)
+ void setNumberOfReceivedConfirmEvents(int,long)
+ long getNumberOfReceivedConfirmEvents(int)
+ void setNumberOfRetriedEvents(int,long)
+ long getNumberOfRetriedEvents(int)
+ void increaseReceivedMsgCounter(int,long,long)
+ boolean allClientsLoggedIn()
+ int getSumOfAllReceivedConfirmEvents()
+ int getSumOfAllLostConfirmEvents()
+ int getSumOfAllRetriedEvents()
+ int getSumOfAllSentEventMessages()
+ int getSumOfAllReceivedMessages()
+ int getSumOfAllRetries()
+ long getAverageRTT()
+ long getAverageRTT(int)
+ long getMinimumRTT()
+ long getMaximumRTT()
+ int getNumberOfSentRequests()
+ int getNumberOfSentRequests(int)
+ int getNumberOfReceivedResponses()
+ int getNumberOfReceivedResponses(int)
+ int getNumberOfLostResponses()
+ int getNumberOfLostResponses(int)
+ int getNumberOfRetries(int)
+ long getSumRTT(int)
+ long getSumRTT()
+ long getSumServerTime(int)
+ DistributionMetrics calculateMetrics()
+ long getSumServerTime()
+ long getAverageServerTime()
+ long getMaxHeapSize()
+ void printClientStatistic(int)
+ void printStatistic()
+ void writeStatisticSet(String,String,String,String,String,float)
- long usedMemory()
}
class edu.hm.dako.chatbenchmarking.SharedClientStatistics.ClientStatistics {
~ int sentRequests
~ int receivedResponses
~ int numberOfRetries
~ long numberOfSentEventMessages
~ long numberOfReceivedConfirmEvents
~ long numberOfLostConfirmEvents
~ long numberOfRetriedEvents
~ long averageRTT
~ long maxRTT
~ long minRTT
~ long sumRTT
~ ArrayList<Long> rttList
~ long sumServerTime
~ long avgServerTime
~ long maxHeapSize
}
class edu.hm.dako.chatbenchmarking.gui.UserInterfaceInputParameters {
- int numberOfClients
- int messageLength
- int clientThinkTime
- int numberOfMessages
- int numberOfRetries
- int responseTimeout
- ChatServerImplementationType implementationType
- MeasurementType measurementType
- int remoteServerPort
- String remoteServerAddress
+ <<Create>> UserInterfaceInputParameters()
+ String mapImplementationTypeToString(ChatServerImplementationType)
+ String mapMeasurementTypeToString(MeasurementType)
+ int getNumberOfClients()
+ void setNumberOfClients(int)
+ int getMessageLength()
+ void setMessageLength(int)
+ int getClientThinkTime()
+ void setClientThinkTime(int)
+ int getNumberOfMessages()
+ void setNumberOfMessages(int)
+ ChatServerImplementationType getChatServerImplementationType()
+ void setChatServerImplementationType(ChatServerImplementationType)
+ int getNumberOfRetries()
+ void setNumberOfRetries(int)
+ int getResponseTimeout()
+ void setResponseTimeout(int)
+ MeasurementType getMeasurementType()
+ void setMeasurementType(MeasurementType)
+ int getRemoteServerPort()
+ void setRemoteServerPort(int)
+ String getRemoteServerAddress()
+ void setRemoteServerAddress(String)
}
enum edu.hm.dako.chatbenchmarking.MeasurementType {
+  VarThreads
+  VarMsgLength
}
class edu.hm.dako.chatbenchmarking.BenchmarkingTimeCounterThread {
- {static} int SLEEP_TIME_IN_SECONDS
- {static} Logger log
- BenchmarkingClientUserInterface out
- boolean running
+ <<Create>> BenchmarkingTimeCounterThread(BenchmarkingClientUserInterface)
+ void run()
+ void stopThread()
}
class edu.hm.dako.chatbenchmarking.CpuUtilisationWatch {
- {static} OperatingSystemMXBean osBean
- {static} int nCPUs
- Long startWallClockTime
- Long startCpuTime
+ <<Create>> CpuUtilisationWatch()
+ float getAverageCpuUtilisation()
}
class edu.hm.dako.chatbenchmarking.BenchmarkingConstants {
+ {static} int MAX_CLIENTS
+ {static} int MAX_MESSAGES_PER_CLIENT
+ {static} int MAX_MESSAGE_LENGTH
+ <<Create>> BenchmarkingConstants()
}


edu.hm.dako.chatbenchmarking.gui.BenchmarkingClientUserInterface <|.. edu.hm.dako.chatbenchmarking.gui.BenchmarkingClientFxGUI
javafx.application.Application <|-- edu.hm.dako.chatbenchmarking.gui.BenchmarkingClientFxGUI
edu.hm.dako.chatbenchmarking.BenchmarkingStartInterface <|.. edu.hm.dako.chatbenchmarking.BenchmarkingClientCoordinator
edu.hm.dako.chatclient.ClientUserInterface <|.. edu.hm.dako.chatbenchmarking.BenchmarkingClientCoordinator
edu.hm.dako.chatbenchmarking.Thread <|-- edu.hm.dako.chatbenchmarking.BenchmarkingClientCoordinator
edu.hm.dako.chatbenchmarking.Runnable <|.. edu.hm.dako.chatbenchmarking.BenchmarkingClientImpl
edu.hm.dako.chatclient.ClientUserInterface <|.. edu.hm.dako.chatbenchmarking.BenchmarkingClientImpl
edu.hm.dako.chatclient.AbstractChatClient <|-- edu.hm.dako.chatbenchmarking.BenchmarkingClientImpl
edu.hm.dako.chatbenchmarking.SharedClientStatistics +.. edu.hm.dako.chatbenchmarking.SharedClientStatistics.ClientStatistics
edu.hm.dako.chatbenchmarking.Thread <|-- edu.hm.dako.chatbenchmarking.BenchmarkingTimeCounterThread
@enduml